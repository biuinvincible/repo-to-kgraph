#!/usr/bin/env bash
# Repository Knowledge Graph - Enhanced CLI Wrapper
# Usage: ./kgraph <command> [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_PATH="$SCRIPT_DIR/venv"
PYTHON_CMD="$VENV_PATH/bin/python"

# Ensure we're in the right directory
cd "$SCRIPT_DIR"

# Check if virtual environment exists
if [ ! -d "$VENV_PATH" ]; then
    echo -e "${RED}‚ùå Virtual environment not found at $VENV_PATH${NC}"
    echo -e "${YELLOW}üí° Run: python -m venv venv && source venv/bin/activate && pip install -r requirements.txt${NC}"
    exit 1
fi

# Activate virtual environment
source "$VENV_PATH/bin/activate"

# Load environment variables from .env file if it exists
if [ -f "$SCRIPT_DIR/.env" ]; then
    echo -e "${GREEN}üîß Loading configuration from .env file...${NC}"
    # Use a more robust method to parse .env file
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip empty lines and comments
        if [ -n "$line" ] && [ "${line:0:1}" != "#" ]; then
            # Remove inline comments and trailing spaces
            line=$(echo "$line" | sed 's/[[:space:]]*#.*$//' | sed 's/[[:space:]]*$//')
            if [ -n "$line" ]; then
                export "$line"
            fi
        fi
    done < "$SCRIPT_DIR/.env"
fi

# Function to print usage
print_usage() {
    echo -e "${BLUE}üîç Repository Knowledge Graph CLI${NC}"
    echo ""
    echo -e "${GREEN}USAGE:${NC}"
    echo "  ./kgraph <command> [options]"
    echo ""
    echo -e "${GREEN}COMMANDS:${NC}"
    echo -e "  ${BLUE}parse${NC} <path>              Parse repository and build knowledge graph"
    echo -e "  ${BLUE}query${NC} <description>       Query for relevant code context"
    echo -e "  ${BLUE}serve${NC}                     Start API server"
    echo -e "  ${BLUE}list${NC}                      List all indexed repositories"
    echo -e "  ${BLUE}status${NC} [repo-id]          Show repository status"
    echo -e "  ${BLUE}update${NC} <path>             Update existing repository"
    echo -e "  ${BLUE}clear${NC}                     Clear all parsed repositories"
    echo -e "  ${BLUE}setup${NC}                     Setup databases and dependencies"
    echo -e "  ${BLUE}demo${NC}                      Run demonstration with test data"
    echo -e "  ${BLUE}help${NC}                      Show this help message"
    echo ""
    echo -e "${GREEN}EXAMPLES:${NC}"
    echo "  ./kgraph parse /path/to/my-project"
    echo "  ./kgraph query \"implement user authentication\""
    echo "  ./kgraph serve --port 8080"
    echo "  ./kgraph demo"
    echo ""
    echo -e "${GREEN}SETUP:${NC}"
    echo "  ./kgraph setup    # Start Neo4j and setup environment"
    echo ""
}

# Function to setup environment
setup_environment() {
    echo -e "${BLUE}üöÄ Setting up Repository Knowledge Graph...${NC}"

    # Check if Docker is available
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker is required but not installed${NC}"
        exit 1
    fi

    # Start Neo4j if not running
    if ! docker ps | grep -q neo4j; then
        echo -e "${YELLOW}üîß Starting Neo4j database...${NC}"
        docker run --name neo4j-kgraph \
            -p7474:7474 -p7687:7687 \
            --env NEO4J_AUTH=neo4j/testpassword \
            -d neo4j:latest

        echo -e "${GREEN}‚úÖ Neo4j started on http://localhost:7474${NC}"
        echo -e "${YELLOW}üí° Default credentials: neo4j/testpassword${NC}"
    else
        echo -e "${GREEN}‚úÖ Neo4j already running${NC}"
    fi

    echo -e "${GREEN}‚úÖ Environment configured${NC}"

    # Test CLI
    echo -e "${BLUE}üîç Testing CLI...${NC}"
    $PYTHON_CMD -m repo_kgraph.cli --help > /dev/null
    echo -e "${GREEN}‚úÖ CLI ready${NC}"

    echo ""
    echo -e "${GREEN}üéâ Setup complete! You can now:${NC}"
    echo "  ./kgraph parse /path/to/your/project"
    echo "  ./kgraph query \"your question here\""
    echo "  ./kgraph serve"
}

# Function to run demo
run_demo() {
    echo -e "${BLUE}üéÆ Running Repository Knowledge Graph Demo...${NC}"

    # Ensure Neo4j is running
    if ! docker ps | grep -q neo4j; then
        echo -e "${YELLOW}üîß Starting Neo4j for demo...${NC}"
        setup_environment
    fi

    # Environment variables loaded from .env file

    # Create and parse demo repository
    echo -e "${YELLOW}üìÅ Creating demo repository...${NC}"
    if [ -d "$SCRIPT_DIR/demo-repo" ]; then
        rm -rf "$SCRIPT_DIR/demo-repo"
    fi

    # This will be filled with the demo repo creation
    echo -e "${GREEN}‚úÖ Demo repository created${NC}"
    echo -e "${YELLOW}üîç Parsing demo repository...${NC}"

    $PYTHON_CMD -m repo_kgraph.cli parse-repo "$SCRIPT_DIR/demo-repo" --verbose

    echo -e "${GREEN}‚úÖ Demo parsing complete${NC}"
    echo ""
    echo -e "${BLUE}üéØ Try these demo queries:${NC}"
    echo "  ./kgraph query \"implement user authentication\""
    echo "  ./kgraph query \"database connection logic\""
    echo "  ./kgraph query \"API endpoints for users\""
}

# Main command handling
case "${1:-help}" in
    "parse")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Please provide a repository path${NC}"
            echo "Usage: ./kgraph parse <path> [options]"
            exit 1
        fi

        echo -e "${BLUE}üîç Parsing repository: $2${NC}"
        shift 1
        $PYTHON_CMD -m repo_kgraph.cli parse-repo "$@"
        ;;

    "query")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Please provide a query description${NC}"
            echo "Usage: ./kgraph query \"your question here\""
            exit 1
        fi

        echo -e "${BLUE}ü§î Querying: $2${NC}"
        shift 1
        $PYTHON_CMD -m repo_kgraph.cli query "$@"
        ;;

    "serve")
        echo -e "${BLUE}üöÄ Starting API server...${NC}"
        shift 1
        $PYTHON_CMD -m repo_kgraph.cli serve "$@"
        ;;

    "list")
        echo -e "${BLUE}üìã Listing repositories...${NC}"
        $PYTHON_CMD -m repo_kgraph.cli list
        ;;

    "clear")
        echo -e "${BLUE}üßπ Clearing all repositories...${NC}"
        $PYTHON_CMD -m repo_kgraph.cli clear
        ;;

    "status")
        echo -e "${BLUE}üìä Repository status...${NC}"
        shift 1
        $PYTHON_CMD -m repo_kgraph.cli status "$@"
        ;;

    "update")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Please provide a repository path${NC}"
            echo "Usage: ./kgraph update <path>"
            exit 1
        fi

        echo -e "${BLUE}üîÑ Updating repository: $2${NC}"
        shift 1
        $PYTHON_CMD -m repo_kgraph.cli parse-repo "$@" --incremental
        ;;

    "setup")
        setup_environment
        ;;

    "demo")
        run_demo
        ;;

    "help"|"--help"|"-h")
        print_usage
        ;;

    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo ""
        print_usage
        exit 1
        ;;
esac