[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "repo-kgraph"
version = "1.0.0"
description = "Transform code repositories into queryable knowledge graphs for AI coding agents"
authors = [
    {name = "Repository Knowledge Graph Team", email = "team@repo-kgraph.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["knowledge-graph", "code-analysis", "ai-agents", "semantic-search"]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",

    # Code parsing
    "tree-sitter>=0.21.0",
    "tree-sitter-languages>=1.9.0",

    # Graph database
    "neo4j>=5.15.0",
    "py2neo>=2021.2.4",

    # Vector database and embeddings
    "chromadb>=0.4.18",
    "sentence-transformers>=2.2.2",
    "openai>=1.3.0",
    "langchain-ollama>=0.1.0",

    # Agent framework
    "langchain>=0.0.350",
    "langchain-community>=0.0.2",

    # CLI and utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",

    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.1.0",

    # HTTP client
    "httpx>=0.25.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",

    # Code quality
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "isort>=5.12.0",

    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",

    # Development utilities
    "pre-commit>=3.5.0",
    "jupyter>=1.0.0",
]

production = [
    # Production vector database
    "weaviate-client>=3.25.0",

    # Enhanced monitoring
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",

    # Production deployment
    "gunicorn>=21.2.0",
    "redis>=5.0.1",
]

[project.urls]
Homepage = "https://github.com/your-org/repo-to-kgraph"
Repository = "https://github.com/your-org/repo-to-kgraph.git"
Documentation = "https://repo-kgraph.readthedocs.io"
"Bug Tracker" = "https://github.com/your-org/repo-to-kgraph/issues"

[project.scripts]
repo-kgraph = "repo_kgraph.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black formatting
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["repo_kgraph"]

# Flake8 linting
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

# MyPy type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "neo4j.*",
    "py2neo.*",
    "chromadb.*",
    "sentence_transformers.*",
    "langchain.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "contract: marks tests as contract tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]